package tech.projectmatris.antimalwareapp.scanners;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.XmlResourceParser;
import android.net.Uri;
import android.os.Build;
import android.preference.PreferenceManager;

import androidx.annotation.RequiresApi;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.tensorflow.lite.Interpreter;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import io.reactivex.rxjava3.annotations.NonNull;
import io.reactivex.rxjava3.core.Observable;
import tech.projectmatris.antimalwareapp.R;
import tech.projectmatris.antimalwareapp.activities.AppDetails;
import tech.projectmatris.antimalwareapp.activities.ResultActivity;
import tech.projectmatris.antimalwareapp.data.AppInfo;
import tech.projectmatris.antimalwareapp.utils.AppConstants;
import tech.projectmatris.antimalwareapp.utils.Sha256HashExtractor;

public class Scanner {
    Context context;
    private PackageManager pm;
    public List<ApplicationInfo> packages;

    private Interpreter tflite = null;
    private JSONArray p_jArray = null;
    private JSONArray i_jArray = null;
    private final float[] inputVal = new float[2000];

    private final ArrayList<AppInfo> goodware = new ArrayList<>();
    private final ArrayList<AppInfo> malware = new ArrayList<>();
    private final ArrayList<AppInfo> unknown = new ArrayList<>();
    private final ArrayList<AppInfo> risky = new ArrayList<>();
    private final ArrayList<AppInfo> scannedApps = new ArrayList<>();

    private ArrayList<String> appPermissionsList = new ArrayList<>();
    private ArrayList<String> appIntentsList = new ArrayList<>();

    private boolean withSysApps = true;
    private String scanningAppName;
    private int status = 0;
    private int percentCompleted;
    public int installedAppsCount;
    private float predictionScore;

    public Scanner(Context context) {
        this.context = context;
    }

    public void setWithSysApps(boolean prefValue) {
        this.withSysApps = prefValue;
    }

    public void setupInstalledPackages() {
        this.pm = context.getPackageManager();
        this.packages = loadInstalledApps(true, withSysApps);
        this.installedAppsCount = packages.size();
    }

    public void preProcess() {
        loadFeatures();
        setupInstalledPackages();
    }

    @RequiresApi(api = Build.VERSION_CODES.M)
    public void scanApp(String packageName, String scan_mode) throws PackageManager.NameNotFoundException {
        //Realtime/Custom Scan

        String sha256Hash = "";
        boolean skipScan = false;

        preProcess();
        String prediction = scan(packageName);

        if (prediction == null) {
            skipScan = true;
        }

        String hash = Sha256HashExtractor.getSha256Hash(pm.getPackageInfo(packageName, 0).applicationInfo.publicSourceDir);
        if (hash != null) {
            sha256Hash = hash;
        }

        PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);
        String appName = packageInfo.applicationInfo.loadLabel(pm).toString();

        if (!skipScan) {
            Intent intent = new Intent(context, AppDetails.class);
            intent.putExtra("appName", appName);
            intent.putExtra("packageName", packageName);
            intent.putExtra("result", prediction);
            intent.putExtra("prediction", predictionScore);
            intent.putExtra("scan_mode", scan_mode);
            intent.putStringArrayListExtra("permissionList", appPermissionsList);
            intent.putExtra(AppConstants.SHA_256_HASH, sha256Hash);

            if (scan_mode.equalsIgnoreCase("custom_scan")) {
                context.startActivity(intent);
            } else if (scan_mode.equalsIgnoreCase("realtime_scan")) {
                NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);
                String CHANNEL_ID = "channel_100";
                NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(context, CHANNEL_ID);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    String CHANNEL_NAME = "PROJECT MATRIS";
                    NotificationChannel mChannel = new NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);
                    notificationManager.createNotificationChannel(mChannel);
                }
                int NOTIFICATION_ID = 100;
                PendingIntent contentIntent = PendingIntent.getActivity(context, 1, intent, PendingIntent.FLAG_CANCEL_CURRENT |
                        PendingIntent.FLAG_IMMUTABLE);
                if (prediction.equalsIgnoreCase(context.getString(R.string.safe))) {
                    notificationBuilder.setSmallIcon(R.drawable.ic_notification)
                            .setAutoCancel(true)
                            .setContentTitle("LibreAV")
                            .setContentIntent(contentIntent)
                            .setContentText(appName + context.getString(R.string.is) + prediction)
                            .setPriority(NotificationCompat.PRIORITY_HIGH);
                    notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());
                } else {
                    NOTIFICATION_ID = (int) (new Date()).getTime();
                    Intent uninstallIntent = new Intent(Intent.ACTION_DELETE);
                    uninstallIntent.setData(Uri.parse("package:" + packageName));
                    PendingIntent uninstallPendingIntent = PendingIntent.getActivity(context, NOTIFICATION_ID + 1, uninstallIntent, PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_IMMUTABLE);
                    PendingIntent contentIntent1 = PendingIntent.getActivity(context, NOTIFICATION_ID + 2, intent, PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_IMMUTABLE);
                    notificationBuilder.setSmallIcon(R.drawable.ic_notification)
                            .setAutoCancel(true)
                            .setVibrate(new long[]{250, 250, 250, 250})
                            .setContentTitle("LibreAV")
                            .setContentText(appName + context.getString(R.string.is) + prediction)
                            .setContentIntent(contentIntent1)
                            .setPriority(NotificationCompat.PRIORITY_HIGH)
                            .addAction(R.drawable.ic_delete_notification, context.getString(R.string.uninstall).toUpperCase(), uninstallPendingIntent);
                    notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());
                }
            }
        }

    }

    private String scan(String packageName) {
        String prediction;

        try {
            if ((pm.getPackageInfo(packageName, 0).applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 1 && !withSysApps) {
                return null;
            } else {
                boolean flag = false;// flag is true if and only if the app under scan contains at least one permission or intent-filter defined in features.json
                appPermissionsList = getListOfPermissions(context.createPackageContext(packageName, 0));
                appIntentsList = getListOfIntents(context.createPackageContext(packageName, 0));

                String str;

                if (appPermissionsList.size() == 0 && appIntentsList.size() == 0) {
                    prediction = context.getString(R.string.unknown);
                    return prediction;
                }

                for (int i = 0; i < p_jArray.length(); i++) {
                    str = p_jArray.optString(i);
                    if ((appPermissionsList.contains(str))) {
                        inputVal[i] = 1;
                        flag = true;
                    } else {
                        inputVal[i] = 0;
                    }
                }


                for (int i = 0; i < i_jArray.length(); i++) {
                    str = i_jArray.optString(i);
                    if ((appIntentsList.contains(str))) {
                        inputVal[i + 489] = 1;
                        flag = true;
                    } else {
                        inputVal[i + 489] = 0;
                    }
                }

                if (!flag) {
                    prediction = context.getString(R.string.unknown);
                    return prediction;
                }

                float[][] outputVal = new float[1][1];

                // Run the model
                tflite.run(inputVal, outputVal);
                float inferredValue = outputVal[0][0];
                predictionScore = inferredValue;
                if (inferredValue > 0.75) {
                    prediction = context.getString(R.string.malware);
                } else if (inferredValue > 0.5) {
                    prediction = context.getString(R.string.risky);
                } else {
                    prediction = context.getString(R.string.safe);
                }
                return prediction;

            }
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }

    public @NonNull Observable<String[]> scanNow() {
        return Observable.create(emitter -> {
            preProcess();
            for (ApplicationInfo packageInfo : packages) {
                scanningAppName = packageInfo.loadLabel(pm).toString();
                //publishProgress(scanningAppName);
                AppInfo app = new AppInfo(packageInfo.loadLabel(pm).toString(), packageInfo.packageName, packageInfo.publicSourceDir, packageInfo.flags & ApplicationInfo.FLAG_SYSTEM);
                app.appIcon = packageInfo.loadIcon(pm);

                status += 1;
                percentCompleted = (int) (((float) status / installedAppsCount) * 100f);

                String[] values = {scanningAppName, String.format("%s%%", Integer.toString(percentCompleted)), Integer.toString(status), String.format("%s of %s", Integer.toString(status), Integer.toString(installedAppsCount))};
                emitter.onNext(values);

                String prediction = scan(packageInfo.packageName);

                if (prediction != null) {
                    app.prediction = prediction;
                    app.predictionScore = predictionScore;

                    if (prediction.equalsIgnoreCase(context.getString(R.string.unknown))) {
                        unknown.add(app);
                    } else if (prediction.equalsIgnoreCase(context.getString(R.string.malware))) {
                        malware.add(app);
                    } else if (prediction.equalsIgnoreCase(context.getString(R.string.risky))) {
                        risky.add(app);
                    } else if (prediction.equalsIgnoreCase(context.getString(R.string.safe))) {
                        goodware.add(app);
                    }
                }

                app.permissionList = appPermissionsList;
            }
            putDateInSharedPreference();
            Collections.sort(malware, AppInfo.appNameComparator);
            Collections.sort(risky, AppInfo.appNameComparator);
            Collections.sort(unknown, AppInfo.appNameComparator);
            Collections.sort(goodware, AppInfo.appNameComparator);
            scannedApps.addAll(malware);
            scannedApps.addAll(risky);
            scannedApps.addAll(unknown);
            scannedApps.addAll(goodware);
            //Log.i(TIMER, "Average Time: " + Float.toString(totalTime / count));
            ResultActivity.apps = scannedApps;

            emitter.onComplete();
        });
    }

    public void loadFeatures() {
        try {
            tflite = new Interpreter(loadModelFile(), null);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
            // Loading the features.json from assets folder. Refer loadJSONFromAsset() function for more details
            JSONObject obj = new JSONObject(loadJSONFromAsset());
            p_jArray = obj.getJSONArray("permissions");// This array stores permissions from features.json file
            i_jArray = obj.getJSONArray("intents");// This array  stores intents from features.json file
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public List<ApplicationInfo> loadInstalledApps(Boolean sorted, Boolean withSystemApps) {
        PackageManager packageManager = context.getPackageManager();
        List<ApplicationInfo> installedApps = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);

        if (sorted)
            Collections.sort(installedApps, new ApplicationInfo.DisplayNameComparator(packageManager));

        if (!withSystemApps) {
            List<ApplicationInfo> filteredApps = new ArrayList<>();
            for (ApplicationInfo appInfo : installedApps) {
                if (appInfo != null && (appInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
                    filteredApps.add(appInfo);
                }
            }
            return filteredApps;
        }
        return installedApps;
    }

    /**
     * Load the JSON file from assets folder
     *
     * @return String containing contents of JSON file
     * <p>
     * Borrowed from: https://stackoverflow.com/questions/19945411 (GrIsHu)
     */
    private String loadJSONFromAsset() {
        String json;
        try {
            InputStream is = context.getAssets().open("features.json");
            int size = is.available();
            byte[] buffer = new byte[size];
            //noinspection ResultOfMethodCallIgnored
            is.read(buffer);
            is.close();
            json = new String(buffer, "UTF-8");

        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
        return json;
    }

    private MappedByteBuffer loadModelFile() throws IOException {
        AssetFileDescriptor fileDescriptor = context.getAssets().openFd("saved_model.tflite");
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }

    /**
     * Get the list of permissions used by the application
     * <p>
     * Borrowed from: https://stackoverflow.com/questions/18236801 (Yousha Aleayoub)
     */
    private static ArrayList<String> getListOfPermissions(final Context context) {
        ArrayList<String> arr = new ArrayList<>();

        try {
            final AssetManager am = context.createPackageContext(context.getPackageName(), 0).getAssets();
            final Method addAssetPath = am.getClass().getMethod("addAssetPath", String.class);
            final int cookie = (Integer) addAssetPath.invoke(am, context.getPackageManager().getApplicationInfo(context.getPackageName(), 0).sourceDir);
            final XmlResourceParser xmlParser = am.openXmlResourceParser(cookie, "AndroidManifest.xml");
            int eventType = xmlParser.next();

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if ((eventType == XmlPullParser.START_TAG) && "uses-permission".equals(xmlParser.getName())) {
                    for (byte i = 0; i < xmlParser.getAttributeCount(); i++) {
                        if (xmlParser.getAttributeName(i).equals("name")) {
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.next();
            }
            xmlParser.close();
        } catch (final XmlPullParserException exception) {
            exception.printStackTrace();
        } catch (final PackageManager.NameNotFoundException exception) {
            exception.printStackTrace();
        } catch (final IOException exception) {
            exception.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return arr;

    }

    private static ArrayList<String> getListOfIntents(final Context context) {
        ArrayList<String> arr = new ArrayList<>();

        try {
            final AssetManager am = context.createPackageContext(context.getPackageName(), 0).getAssets();
            final Method addAssetPath = am.getClass().getMethod("addAssetPath", String.class);
            final int cookie = (Integer) addAssetPath.invoke(am, context.getPackageManager().getApplicationInfo(context.getPackageName(), 0).sourceDir);
            final XmlResourceParser xmlParser = am.openXmlResourceParser(cookie, "AndroidManifest.xml");
            int eventType = xmlParser.next();

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if ((eventType == XmlPullParser.START_TAG) && "action".equals(xmlParser.getName())) {
                    for (byte i = 0; i < xmlParser.getAttributeCount(); i++) {
                        if (xmlParser.getAttributeName(i).equals("name")) {
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.next();
            }
            xmlParser.close();
        } catch (final XmlPullParserException exception) {
            exception.printStackTrace();
        } catch (final PackageManager.NameNotFoundException exception) {
            exception.printStackTrace();
        } catch (final IOException exception) {
            exception.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return arr;
    }

    private void putDateInSharedPreference() {
        String curDateTime = java.text.DateFormat.getDateTimeInstance().format(new Date());
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString("lastScan", curDateTime);
        editor.apply();
    }
}
