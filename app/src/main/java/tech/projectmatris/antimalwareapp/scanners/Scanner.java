package tech.projectmatris.antimalwareapp.scanners;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.XmlResourceParser;
import android.preference.PreferenceManager;
import android.widget.ProgressBar;
import android.widget.TextView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.reactivestreams.Subscriber;
import org.tensorflow.lite.Interpreter;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import io.reactivex.rxjava3.annotations.NonNull;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.schedulers.Schedulers;
import tech.projectmatris.antimalwareapp.R;
import tech.projectmatris.antimalwareapp.activities.ResultActivity;
import tech.projectmatris.antimalwareapp.data.AppInfo;

public class Scanner {
    Context context;
    private Interpreter tflite = null;
    private JSONArray p_jArray = null;
    private JSONArray i_jArray = null;

    private final ArrayList<AppInfo> goodware = new ArrayList<>();
    private final ArrayList<AppInfo> malware = new ArrayList<>();
    private final ArrayList<AppInfo> unknown = new ArrayList<>();
    private final ArrayList<AppInfo> risky = new ArrayList<>();
    private final ArrayList<AppInfo> scannedApps = new ArrayList<>();

    private boolean withSysApps;
    private String scanningAppName;
    private int status = 0;
    private int percentCompleted;
    private int installedAppsCount;

    public Scanner(Context context) {
        this.context = context;
    }

    public void setWithSysApps(boolean prefValue) {
        this.withSysApps = prefValue;
    }

    public @NonNull Observable<String[]> scanNow() {
        return Observable.create(emitter -> {
            float[] inputVal = new float[2000];

            try {
                tflite = new Interpreter(loadModelFile(), null);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            try {
                // Loading the features.json from assets folder. Refer loadJSONFromAsset() function for more details
                JSONObject obj = new JSONObject(loadJSONFromAsset());
                p_jArray = obj.getJSONArray("permissions");// This array stores permissions from features.json file
                i_jArray = obj.getJSONArray("intents");// This array  stores intents from features.json file
            } catch (JSONException e) {
                e.printStackTrace();
            }
            final PackageManager pm = context.getPackageManager();
            List<ApplicationInfo> packages = loadInstalledApps(true, withSysApps);
            installedAppsCount = packages.size();

            for (ApplicationInfo packageInfo : packages) {
                boolean flag = false;// flag is true if and only if the app under scan contains at least one permission or intent-filter defined in features.json
                scanningAppName = packageInfo.loadLabel(pm).toString();
                //publishProgress(scanningAppName);
                AppInfo app = new AppInfo(packageInfo.loadLabel(pm).toString(), packageInfo.packageName, packageInfo.publicSourceDir, packageInfo.flags & ApplicationInfo.FLAG_SYSTEM);
                app.appIcon = packageInfo.loadIcon(pm);

                status += 1;
                percentCompleted = (int) (((float) status / installedAppsCount) * 100f);

                String[] values = {scanningAppName, String.format("%s%%", Integer.toString(percentCompleted)), Integer.toString(status), String.format("%s of %s", Integer.toString(status), Integer.toString(installedAppsCount))};
                emitter.onNext(values);
                //Log.d(TAG, "Installed package :" + packageInfo.packageName);
                try {
                    //count++;
                    // Get the list of permissions used by the application.
                    //Log.d(TAG,"extracting permissions...");
                    //long startTime = System.currentTimeMillis();
                    ArrayList<String> appPermissionsList = getListOfPermissions(context.createPackageContext(packageInfo.packageName, 0));

                    // Get the list of intents used by the application.
                    //Log.d(TAG,"extracting intents...");
                    ArrayList<String> appIntentsList = getListOfIntents(context.createPackageContext(packageInfo.packageName, 0));

                    String str;
                    //Log.d(scanningAppName,"IntentsList: "+appIntentsList.get(0));
                    //Log.d(scanningAppName,"IntentsList size: "+appIntentsList.size());

                    if (appPermissionsList.size() == 0 && appIntentsList.size() == 0) {
                        //Log.d(TAG,"No permissions and intents found. Skipping...");
                        app.prediction = context.getString(R.string.unknown);
                        unknown.add(app);
                        continue;
                    }

                    // The following for loops are used to create the input feature vector
                    for (int i = 0; i < p_jArray.length(); i++) {
                        str = p_jArray.optString(i);
                        if ((appPermissionsList.contains(str))) {
                            inputVal[i] = 1;
                            flag = true;
                            //Log.d(scanningAppName,"Check Permissions: "+ str + " is present in appsPermissionsList.");
                        } else {
                            inputVal[i] = 0;
                            ///Log.d(scanningAppName,"Check Permissions: "+ str + " is NOT present in appsPermissionsList.");
                        }
                    }


                    for (int i = 0; i < i_jArray.length(); i++) {
                        str = i_jArray.optString(i);
                        if ((appIntentsList.contains(str))) {
                            inputVal[i + 489] = 1;
                            flag = true;
                            //Log.d(scanningAppName,"Check Intents:"+ str + " is present in appsIntentsList.");
                        } else {
                            inputVal[i + 489] = 0;
                            //Log.d(scanningAppName,"Check Intents:"+ str + " is NOT present in appsIntentsList.");
                        }
                    }
                    //Log.d("Info:", "feature vector is created.");
                    //Log.d(scanningAppName, scanningAppName+" feature vector:"+ Arrays.toString(inputVal));
                    if (!flag) {
                        app.prediction = context.getString(R.string.unknown);
                        unknown.add(app);
                        continue;
                    }

                    // To store output from the model
                    float[][] outputVal = new float[1][1];

                    // Run the model
                    tflite.run(inputVal, outputVal);

                    //long endTime = System.currentTimeMillis();
                    //elapsedTime = endTime - startTime;
                    //totalTime += elapsedTime;
                    //Log.d(TIMER, "Elapsed Time: " + Float.toString(elapsedTime));


                    float inferredValue = outputVal[0][0];
                    app.predictionScore = inferredValue;
                    app.permissionList = appPermissionsList;

                    if (inferredValue > 0.75) {
                        app.prediction = context.getString(R.string.malware);
                        malware.add(app);
                    } else if (inferredValue > 0.5) {
                        app.prediction = context.getString(R.string.risky);
                        risky.add(app);
                    } else {
                        app.prediction = context.getString(R.string.safe);
                        goodware.add(app);
                    }
                } catch (PackageManager.NameNotFoundException e) {
                    e.printStackTrace();
                }
            }

            putDateInSharedPreference();
            Collections.sort(malware, AppInfo.appNameComparator);
            Collections.sort(risky, AppInfo.appNameComparator);
            Collections.sort(unknown, AppInfo.appNameComparator);
            Collections.sort(goodware, AppInfo.appNameComparator);
            scannedApps.addAll(malware);
            scannedApps.addAll(risky);
            scannedApps.addAll(unknown);
            scannedApps.addAll(goodware);
            //Log.i(TIMER, "Average Time: " + Float.toString(totalTime / count));
            ResultActivity.apps = scannedApps;

            emitter.onComplete();
        });
}

    public List<ApplicationInfo> loadInstalledApps(Boolean sorted, Boolean withSystemApps) {
        PackageManager packageManager = context.getPackageManager();
        List<ApplicationInfo> installedApps = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);

        if (sorted)
            Collections.sort(installedApps, new ApplicationInfo.DisplayNameComparator(packageManager));

        if (!withSystemApps) {
            List<ApplicationInfo> filteredApps = new ArrayList<>();
            for (ApplicationInfo appInfo : installedApps) {
                if (appInfo != null && (appInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
                    filteredApps.add(appInfo);
                }
            }
            return filteredApps;
        }
        return installedApps;
    }

    /**
     * Load the JSON file from assets folder
     *
     * @return String containing contents of JSON file
     * <p>
     * Borrowed from: https://stackoverflow.com/questions/19945411 (GrIsHu)
     */
    private String loadJSONFromAsset() {
        String json;
        try {
            InputStream is = context.getAssets().open("features.json");
            int size = is.available();
            byte[] buffer = new byte[size];
            //noinspection ResultOfMethodCallIgnored
            is.read(buffer);
            is.close();
            json = new String(buffer, "UTF-8");

        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
        return json;
    }

    private MappedByteBuffer loadModelFile() throws IOException {
        AssetFileDescriptor fileDescriptor = context.getAssets().openFd("saved_model.tflite");
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }

    /**
     * Get the list of permissions used by the application
     * <p>
     * Borrowed from: https://stackoverflow.com/questions/18236801 (Yousha Aleayoub)
     */
    private static ArrayList<String> getListOfPermissions(final Context context) {
        ArrayList<String> arr = new ArrayList<>();

        try {
            final AssetManager am = context.createPackageContext(context.getPackageName(), 0).getAssets();
            final Method addAssetPath = am.getClass().getMethod("addAssetPath", String.class);
            final int cookie = (Integer) addAssetPath.invoke(am, context.getPackageManager().getApplicationInfo(context.getPackageName(), 0).sourceDir);
            final XmlResourceParser xmlParser = am.openXmlResourceParser(cookie, "AndroidManifest.xml");
            int eventType = xmlParser.next();

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if ((eventType == XmlPullParser.START_TAG) && "uses-permission".equals(xmlParser.getName())) {
                    for (byte i = 0; i < xmlParser.getAttributeCount(); i++) {
                        if (xmlParser.getAttributeName(i).equals("name")) {
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.next();
            }
            xmlParser.close();
        } catch (final XmlPullParserException exception) {
            exception.printStackTrace();
        } catch (final PackageManager.NameNotFoundException exception) {
            exception.printStackTrace();
        } catch (final IOException exception) {
            exception.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return arr;

    }

    private static ArrayList<String> getListOfIntents(final Context context) {
        ArrayList<String> arr = new ArrayList<>();

        try {
            final AssetManager am = context.createPackageContext(context.getPackageName(), 0).getAssets();
            final Method addAssetPath = am.getClass().getMethod("addAssetPath", String.class);
            final int cookie = (Integer) addAssetPath.invoke(am, context.getPackageManager().getApplicationInfo(context.getPackageName(), 0).sourceDir);
            final XmlResourceParser xmlParser = am.openXmlResourceParser(cookie, "AndroidManifest.xml");
            int eventType = xmlParser.next();

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if ((eventType == XmlPullParser.START_TAG) && "action".equals(xmlParser.getName())) {
                    for (byte i = 0; i < xmlParser.getAttributeCount(); i++) {
                        if (xmlParser.getAttributeName(i).equals("name")) {
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.next();
            }
            xmlParser.close();
        } catch (final XmlPullParserException exception) {
            exception.printStackTrace();
        } catch (final PackageManager.NameNotFoundException exception) {
            exception.printStackTrace();
        } catch (final IOException exception) {
            exception.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return arr;
    }

    private void putDateInSharedPreference() {
        String curDateTime = java.text.DateFormat.getDateTimeInstance().format(new Date());
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString("lastScan", curDateTime);
        editor.apply();
    }
}
