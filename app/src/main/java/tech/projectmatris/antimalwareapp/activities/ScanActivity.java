/*
 * LibreAV - Anti-malware for Android using machine learning
 * Copyright (C) 2020 Project Matris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package tech.projectmatris.antimalwareapp.activities;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;

import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;
import io.reactivex.rxjava3.annotations.NonNull;
import io.reactivex.rxjava3.observers.DisposableObserver;
import io.reactivex.rxjava3.schedulers.Schedulers;
import tech.projectmatris.antimalwareapp.R;

import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;

import tech.projectmatris.antimalwareapp.scanners.Scanner;

public class ScanActivity extends AppCompatActivity {
    private NotificationManagerCompat notificationManager;
    private DisposableObserver<String[]> disposableObserver;
    private final int NOTIFICATION_ID = 100;
    protected Context context;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = this;
        setContentView(R.layout.activity_scan);
        ActionBar actionBar = this.getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(this.getString(R.string.scanning));
        }
        boolean withSysApps = getIntent().getBooleanExtra("withSysApps", false);

        ProgressBar progressBar = findViewById(R.id.progressBar);
        TextView percentText = findViewById(R.id.percentText);
        TextView statusText = findViewById(R.id.statusText);
        TextView secondarystatusText = findViewById(R.id.secondaryStatusText);
        Button stopButton = findViewById(R.id.stopButton);

        progressBar.getProgressDrawable().setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);

        progressBar.setProgress(0);

        notificationManager = NotificationManagerCompat.from(this);
        String CHANNEL_ID = "channel_100";
        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, CHANNEL_ID);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            String CHANNEL_NAME = "PROJECT MATRIS";
            NotificationChannel mChannel = new NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);
            notificationManager.createNotificationChannel(mChannel);
        }
        notificationBuilder.setSmallIcon(R.drawable.ic_notification)
                .setOngoing(true)
                .setContentTitle("LibreAV")
                .setContentText(this.getString(R.string.scanningApplications))
                .setProgress(0, 0, true);
        notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());

        Scanner scanner = new Scanner(this);
        int installedAppsCount = this.getPackageManager().getInstalledApplications(0).size();
        progressBar.setMax(installedAppsCount);
        scanner.setWithSysApps(withSysApps);

        disposableObserver = new DisposableObserver<String[]>() {
            @Override
            public void onNext(@NonNull String[] s) {
                // Log.d("onNext", "onNext invocation...");
                statusText.setText(s[0]);
                percentText.setText(s[1]);
                progressBar.setProgress(Integer.parseInt(s[2]));
                secondarystatusText.setText(s[3]);

            }

            @Override
            public void onError(@NonNull Throwable e) {
                e.printStackTrace();
            }

            @Override
            public void onComplete() {
                notificationManager.cancel(NOTIFICATION_ID);
                Intent resultScreen = new Intent(context, ResultActivity.class);
                context.startActivity(resultScreen);
            }
        };

        scanner.scanNow().subscribeOn(Schedulers.computation()).observeOn(AndroidSchedulers.mainThread()).subscribe(disposableObserver);

        stopButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                disposableObserver.dispose();
                notificationManager.cancel(NOTIFICATION_ID);
                finish();
            }
        });


    }

    @Override
    public void onBackPressed() {
        disposableObserver.dispose();
        notificationManager.cancel(NOTIFICATION_ID);
    }

    @Override
    protected void onDestroy() {
        disposableObserver.dispose();
        notificationManager.cancel(NOTIFICATION_ID);
        super.onDestroy();
    }
}