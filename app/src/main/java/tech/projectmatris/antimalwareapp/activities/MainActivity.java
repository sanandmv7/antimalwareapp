/*
 * LibreAV - Anti-malware for Android using machine learning
 * Copyright (C) 2020 Project Matris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package tech.projectmatris.antimalwareapp.activities;

import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.View;

import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.view.MenuItem;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import androidx.appcompat.widget.Toolbar;
import tech.projectmatris.antimalwareapp.services.RealTimeService;
import tech.projectmatris.antimalwareapp.settings.SettingsActivity;

import com.google.android.material.navigation.NavigationView;
import tech.projectmatris.antimalwareapp.R;

import static tech.projectmatris.antimalwareapp.helper.ThemeToggleHelper.toggleDarkMode;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener, SharedPreferences.OnSharedPreferenceChangeListener {

    Button scanButton;
    ToggleButton lockButton;
    TextView lastScanText;
    private Context context = this;
    private boolean withSysApps = false;
    SharedPreferences sharedPreferences;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        setupSharedPreferences();

        toggleDarkMode(sharedPreferences.getBoolean("darkMode", true));

        Toolbar toolbar = findViewById(R.id.toolbar);
        lastScanText = findViewById(R.id.textView1);

        setSupportActionBar(toolbar);

        withSysApps = sharedPreferences.getBoolean("includeSystemApps", false);

        String lastScan = sharedPreferences.getString("lastScan", "Never");
        lastScanText.setText(String.format("Last Scan: %s", lastScan));

        DrawerLayout drawer = findViewById(R.id.drawer_layout);

        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            if (!isServiceRunning(RealTimeService.class)) {
                if (sharedPreferences.getBoolean("realTime", true)) {
                    startService(new Intent(this, RealTimeService.class));
                }
            }
        }

        scanButton = findViewById(R.id.scanButton);
        scanButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                context.startActivity(new Intent(context, ScanActivity.class).putExtra("withSysApps", withSysApps));
            }
        });

        lockButton = findViewById(R.id.lockButton);
        lockButton.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked){
                    sharedPreferences.edit().putBoolean("lockdown_mode",true).apply();
                    // TODO: Disable power button
                } else {
                    sharedPreferences.edit().putBoolean("lockdown_mode",false).apply();
                }
            }
        });
        lockButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lockButton.setHighlightColor(Color.GREEN);
            }
        });
    }

    @Override
    protected void onStart() {
        super.onStart();
    }

    @Override
    public void onBackPressed() {
        if(!isLockdownActive()) {
            DrawerLayout drawer = findViewById(R.id.drawer_layout);
            if (drawer.isDrawerOpen(GravityCompat.START)) {
                drawer.closeDrawer(GravityCompat.START);
            } else {
                finishAffinity();
                super.onBackPressed();
            }
        }
    }

    private void setupSharedPreferences() {
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        sharedPreferences.registerOnSharedPreferenceChangeListener(this);
    }

    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        if (key.equals("includeSystemApps") && sharedPreferences.getBoolean(key, false)) {
            withSysApps = sharedPreferences.getBoolean(key, false);
            Toast.makeText(getApplicationContext(), "System apps will be included while scanning", Toast.LENGTH_LONG)
                    .show();
        } else if (key.equals("darkMode") && sharedPreferences.getBoolean(key, true)) {
            toggleDarkMode(sharedPreferences.getBoolean("darkMode", true));
            Toast.makeText(getApplicationContext(), "Dark Mode is Enabled", Toast.LENGTH_LONG)
                    .show();
        } else if (key.equals("darkMode") && !sharedPreferences.getBoolean(key, true)) {
            toggleDarkMode(sharedPreferences.getBoolean("darkMode", true));
            Toast.makeText(getApplicationContext(), "Dark Mode is Disabled", Toast.LENGTH_LONG)
                    .show();
        } else if (key.equals("realTime") && sharedPreferences.getBoolean(key, true)) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                startService(new Intent(this, RealTimeService.class));
            }
        } else if (key.equals("realTime") && !sharedPreferences.getBoolean(key, true)) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                stopService(new Intent(this, RealTimeService.class));
            }
        }

    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_scan) {
            // Handle the action
        } else if (id == R.id.nav_settings) {
            this.startActivity(new Intent(this, SettingsActivity.class));
        } else if (id == R.id.nav_help) {
            this.startActivity(new Intent(this, HelpActivity.class));
        } else if (id == R.id.nav_about) {
            this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse("https://projectmatris.tech")));
        } else if (id == R.id.nav_bug_report) {
            this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse("https://github.com/projectmatris/antimalwareapp/issues/new")));
        } else if (id == R.id.nav_share) {
            Intent shareIntent = new Intent(android.content.Intent.ACTION_SEND);
            shareIntent.setType("text/plain");
            String shareContent = "Check out this app, Anti-malware for Android using Machine Learning: https://play.google.com/store/apps/details?id=tech.projectmatris.antimalwareapp";
            shareIntent.putExtra(Intent.EXTRA_SUBJECT, "Project Matris");
            shareIntent.putExtra(Intent.EXTRA_TEXT, shareContent);
            startActivity(Intent.createChooser(shareIntent, "Share via"));
        }

        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    /**
     * Check if a service is running or not
     * @param serviceClass class of the service
     *
     * @return Boolean value specifying service is running or not
     */
    private boolean isServiceRunning(Class serviceClass) {
        ActivityManager manager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
            if (serviceClass.getName().equals(service.service.getClassName())) {
                return true;
            }
        }
        return false;
    }

    private boolean isLockdownActive(){
        return sharedPreferences.getBoolean("lockdown_mode", false);
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        PreferenceManager.getDefaultSharedPreferences(this).unregisterOnSharedPreferenceChangeListener(this);
    }
}
